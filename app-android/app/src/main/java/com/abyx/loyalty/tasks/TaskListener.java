/*
 * Copyright 2017 Abyx (https://abyx.be)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.abyx.loyalty.tasks;

import android.support.annotation.Nullable;

/**
 * This interface must be implemented by every class that want's to react to state changes of a
 * certain running task.
 *
 * @author Pieter Verschaffelt
 */
public interface TaskListener<T> {
    /**
     * This method is called by a task whenever it makes progress and want's to notify a listening
     * entity about this.
     *
     * @param progress A value between 0.0 and 1.0 indicating the current progress level. The 1.0-
     *                 value will always be passed when the task finishes it's execution. The 0.0-
     *                 value will always be passed when the task starts execution.
     */
    void onProgressUpdate(double progress);

    /**
     * This method is called whenever the task exits early because of some error that occurred. The
     * task will never complete when this method is called and it is guaranteed that the onDone()-
     * method will NOT be called.
     *
     * @param exception The Throwable that caused the task to fail.
     */
    void onFailed(@Nullable Throwable exception);

    /**
     * This method is called whenever the task is completely done executing. This method returns the
     * result that was generated by the task and is guaranteed to be called directly after
     * onProgressUpdate() is called with a 1.0 value. This method will NOT be called whenever the
     * task fails because of some exception. This method will NOT be called when the task has
     * nothing to return. Only onProgressUpdate() will be called in that case.
     *
     * @param result Result generated by the task that should be passed on to a listener.
     */
    void onDone(T result);
}
